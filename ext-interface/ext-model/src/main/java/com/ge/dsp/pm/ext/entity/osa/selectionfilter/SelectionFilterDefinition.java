//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.03.21 at 01:16:18 AM PDT 
//


package com.ge.dsp.pm.ext.entity.osa.selectionfilter;

import java.io.Serializable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.ge.dsp.pm.ext.entity.fieldidentifiervalue.FieldIdentifierValue;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import org.mimosa.osacbmv3_3.SelectionFilter;


/**
 * Defines Start Time/Row and End Time/Row selection filter along with
 * 			sample
 * 			interval and mode
 * 
 * <p>Java class for SelectionFilterDefinition complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SelectionFilterDefinition">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.mimosa.org/OSACBMV3.3.1}SelectionFilter">
 *       &lt;sequence>
 *         &lt;element name="assetSelectionFilter" type="{http://dsp.ge.com/pm/ext/entity/fieldidentifiervalue}FieldIdentifierValue" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="startDefinition" type="{http://dsp.ge.com/pm/ext/entity/osa/selectionfilter}TimeOrRowSelectionFilter"/>
 *         &lt;element name="endDefinition" type="{http://dsp.ge.com/pm/ext/entity/osa/selectionfilter}TimeOrRowSelectionFilter"/>
 *         &lt;element name="sampleInterval" type="{http://www.w3.org/2001/XMLSchema}integer" minOccurs="0"/>
 *         &lt;element name="intervalUnits" type="{http://dsp.ge.com/pm/ext/entity/osa/selectionfilter}IntervalUnits" minOccurs="0"/>
 *         &lt;element name="sampleMode" type="{http://dsp.ge.com/pm/ext/entity/osa/selectionfilter}SampleMode" minOccurs="0"/>
 *         &lt;element name="otherValue" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SelectionFilterDefinition", propOrder = {
    "assetSelectionFilter",
    "startDefinition",
    "endDefinition",
    "sampleInterval",
    "intervalUnits",
    "sampleMode",
    "otherValue"
})
public class SelectionFilterDefinition
    extends SelectionFilter
    implements Serializable, Equals, HashCode, ToString
{

    protected List<FieldIdentifierValue> assetSelectionFilter;
    @XmlElement(required = true)
    protected TimeOrRowSelectionFilter startDefinition;
    @XmlElement(required = true)
    protected TimeOrRowSelectionFilter endDefinition;
    protected BigInteger sampleInterval;
    protected IntervalUnits intervalUnits;
    protected SampleMode sampleMode;
    protected String otherValue;

    /**
     * Gets the value of the assetSelectionFilter property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the assetSelectionFilter property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAssetSelectionFilter().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FieldIdentifierValue }
     * 
     * 
     */
    public List<FieldIdentifierValue> getAssetSelectionFilter() {
        if (assetSelectionFilter == null) {
            assetSelectionFilter = new ArrayList<FieldIdentifierValue>();
        }
        return this.assetSelectionFilter;
    }

    /**
     * Gets the value of the startDefinition property.
     * 
     * @return
     *     possible object is
     *     {@link TimeOrRowSelectionFilter }
     *     
     */
    public TimeOrRowSelectionFilter getStartDefinition() {
        return startDefinition;
    }

    /**
     * Sets the value of the startDefinition property.
     * 
     * @param value
     *     allowed object is
     *     {@link TimeOrRowSelectionFilter }
     *     
     */
    public void setStartDefinition(TimeOrRowSelectionFilter value) {
        this.startDefinition = value;
    }

    /**
     * Gets the value of the endDefinition property.
     * 
     * @return
     *     possible object is
     *     {@link TimeOrRowSelectionFilter }
     *     
     */
    public TimeOrRowSelectionFilter getEndDefinition() {
        return endDefinition;
    }

    /**
     * Sets the value of the endDefinition property.
     * 
     * @param value
     *     allowed object is
     *     {@link TimeOrRowSelectionFilter }
     *     
     */
    public void setEndDefinition(TimeOrRowSelectionFilter value) {
        this.endDefinition = value;
    }

    /**
     * Gets the value of the sampleInterval property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getSampleInterval() {
        return sampleInterval;
    }

    /**
     * Sets the value of the sampleInterval property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setSampleInterval(BigInteger value) {
        this.sampleInterval = value;
    }

    /**
     * Gets the value of the intervalUnits property.
     * 
     * @return
     *     possible object is
     *     {@link IntervalUnits }
     *     
     */
    public IntervalUnits getIntervalUnits() {
        return intervalUnits;
    }

    /**
     * Sets the value of the intervalUnits property.
     * 
     * @param value
     *     allowed object is
     *     {@link IntervalUnits }
     *     
     */
    public void setIntervalUnits(IntervalUnits value) {
        this.intervalUnits = value;
    }

    /**
     * Gets the value of the sampleMode property.
     * 
     * @return
     *     possible object is
     *     {@link SampleMode }
     *     
     */
    public SampleMode getSampleMode() {
        return sampleMode;
    }

    /**
     * Sets the value of the sampleMode property.
     * 
     * @param value
     *     allowed object is
     *     {@link SampleMode }
     *     
     */
    public void setSampleMode(SampleMode value) {
        this.sampleMode = value;
    }

    /**
     * Gets the value of the otherValue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOtherValue() {
        return otherValue;
    }

    /**
     * Sets the value of the otherValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOtherValue(String value) {
        this.otherValue = value;
    }

    /**
     * Sets the value of the assetSelectionFilter property.
     * 
     * @param assetSelectionFilter
     *     allowed object is
     *     {@link FieldIdentifierValue }
     *     
     */
    public void setAssetSelectionFilter(List<FieldIdentifierValue> assetSelectionFilter) {
        this.assetSelectionFilter = assetSelectionFilter;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<FieldIdentifierValue> theAssetSelectionFilter;
            theAssetSelectionFilter = (((this.assetSelectionFilter!= null)&&(!this.assetSelectionFilter.isEmpty()))?this.getAssetSelectionFilter():null);
            strategy.appendField(locator, this, "assetSelectionFilter", buffer, theAssetSelectionFilter);
        }
        {
            TimeOrRowSelectionFilter theStartDefinition;
            theStartDefinition = this.getStartDefinition();
            strategy.appendField(locator, this, "startDefinition", buffer, theStartDefinition);
        }
        {
            TimeOrRowSelectionFilter theEndDefinition;
            theEndDefinition = this.getEndDefinition();
            strategy.appendField(locator, this, "endDefinition", buffer, theEndDefinition);
        }
        {
            BigInteger theSampleInterval;
            theSampleInterval = this.getSampleInterval();
            strategy.appendField(locator, this, "sampleInterval", buffer, theSampleInterval);
        }
        {
            IntervalUnits theIntervalUnits;
            theIntervalUnits = this.getIntervalUnits();
            strategy.appendField(locator, this, "intervalUnits", buffer, theIntervalUnits);
        }
        {
            SampleMode theSampleMode;
            theSampleMode = this.getSampleMode();
            strategy.appendField(locator, this, "sampleMode", buffer, theSampleMode);
        }
        {
            String theOtherValue;
            theOtherValue = this.getOtherValue();
            strategy.appendField(locator, this, "otherValue", buffer, theOtherValue);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SelectionFilterDefinition)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SelectionFilterDefinition that = ((SelectionFilterDefinition) object);
        {
            List<FieldIdentifierValue> lhsAssetSelectionFilter;
            lhsAssetSelectionFilter = (((this.assetSelectionFilter!= null)&&(!this.assetSelectionFilter.isEmpty()))?this.getAssetSelectionFilter():null);
            List<FieldIdentifierValue> rhsAssetSelectionFilter;
            rhsAssetSelectionFilter = (((that.assetSelectionFilter!= null)&&(!that.assetSelectionFilter.isEmpty()))?that.getAssetSelectionFilter():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "assetSelectionFilter", lhsAssetSelectionFilter), LocatorUtils.property(thatLocator, "assetSelectionFilter", rhsAssetSelectionFilter), lhsAssetSelectionFilter, rhsAssetSelectionFilter)) {
                return false;
            }
        }
        {
            TimeOrRowSelectionFilter lhsStartDefinition;
            lhsStartDefinition = this.getStartDefinition();
            TimeOrRowSelectionFilter rhsStartDefinition;
            rhsStartDefinition = that.getStartDefinition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "startDefinition", lhsStartDefinition), LocatorUtils.property(thatLocator, "startDefinition", rhsStartDefinition), lhsStartDefinition, rhsStartDefinition)) {
                return false;
            }
        }
        {
            TimeOrRowSelectionFilter lhsEndDefinition;
            lhsEndDefinition = this.getEndDefinition();
            TimeOrRowSelectionFilter rhsEndDefinition;
            rhsEndDefinition = that.getEndDefinition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "endDefinition", lhsEndDefinition), LocatorUtils.property(thatLocator, "endDefinition", rhsEndDefinition), lhsEndDefinition, rhsEndDefinition)) {
                return false;
            }
        }
        {
            BigInteger lhsSampleInterval;
            lhsSampleInterval = this.getSampleInterval();
            BigInteger rhsSampleInterval;
            rhsSampleInterval = that.getSampleInterval();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sampleInterval", lhsSampleInterval), LocatorUtils.property(thatLocator, "sampleInterval", rhsSampleInterval), lhsSampleInterval, rhsSampleInterval)) {
                return false;
            }
        }
        {
            IntervalUnits lhsIntervalUnits;
            lhsIntervalUnits = this.getIntervalUnits();
            IntervalUnits rhsIntervalUnits;
            rhsIntervalUnits = that.getIntervalUnits();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "intervalUnits", lhsIntervalUnits), LocatorUtils.property(thatLocator, "intervalUnits", rhsIntervalUnits), lhsIntervalUnits, rhsIntervalUnits)) {
                return false;
            }
        }
        {
            SampleMode lhsSampleMode;
            lhsSampleMode = this.getSampleMode();
            SampleMode rhsSampleMode;
            rhsSampleMode = that.getSampleMode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sampleMode", lhsSampleMode), LocatorUtils.property(thatLocator, "sampleMode", rhsSampleMode), lhsSampleMode, rhsSampleMode)) {
                return false;
            }
        }
        {
            String lhsOtherValue;
            lhsOtherValue = this.getOtherValue();
            String rhsOtherValue;
            rhsOtherValue = that.getOtherValue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "otherValue", lhsOtherValue), LocatorUtils.property(thatLocator, "otherValue", rhsOtherValue), lhsOtherValue, rhsOtherValue)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<FieldIdentifierValue> theAssetSelectionFilter;
            theAssetSelectionFilter = (((this.assetSelectionFilter!= null)&&(!this.assetSelectionFilter.isEmpty()))?this.getAssetSelectionFilter():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "assetSelectionFilter", theAssetSelectionFilter), currentHashCode, theAssetSelectionFilter);
        }
        {
            TimeOrRowSelectionFilter theStartDefinition;
            theStartDefinition = this.getStartDefinition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "startDefinition", theStartDefinition), currentHashCode, theStartDefinition);
        }
        {
            TimeOrRowSelectionFilter theEndDefinition;
            theEndDefinition = this.getEndDefinition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "endDefinition", theEndDefinition), currentHashCode, theEndDefinition);
        }
        {
            BigInteger theSampleInterval;
            theSampleInterval = this.getSampleInterval();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sampleInterval", theSampleInterval), currentHashCode, theSampleInterval);
        }
        {
            IntervalUnits theIntervalUnits;
            theIntervalUnits = this.getIntervalUnits();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "intervalUnits", theIntervalUnits), currentHashCode, theIntervalUnits);
        }
        {
            SampleMode theSampleMode;
            theSampleMode = this.getSampleMode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sampleMode", theSampleMode), currentHashCode, theSampleMode);
        }
        {
            String theOtherValue;
            theOtherValue = this.getOtherValue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "otherValue", theOtherValue), currentHashCode, theOtherValue);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
