//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.04.07 at 07:40:43 PM IST 
//


package com.ge.dsp.pm.ext.entity.timeselectionfilter;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import com.ge.dsp.pm.ext.entity.selectionfilter.SelectionFilter;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for PredixTimeSelectionFilter complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PredixTimeSelectionFilter">
 *   &lt;complexContent>
 *     &lt;extension base="{http://dsp.ge.com/pm/ext/entity/selectionfilter}SelectionFilter">
 *       &lt;sequence>
 *         &lt;element name="startAbsolute" type="{http://www.w3.org/2001/XMLSchema}dateTime"/>
 *         &lt;element name="endAbsolute" type="{http://www.w3.org/2001/XMLSchema}dateTime"/>
 *         &lt;element name="endRelativeToNow" type="{http://dsp.ge.com/pm/ext/entity/timeselectionfilter}RelativeTime"/>
 *         &lt;element name="startRelativeToNow" type="{http://dsp.ge.com/pm/ext/entity/timeselectionfilter}RelativeTime"/>
 *         &lt;element name="limit" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="orderBy" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element ref="{http://dsp.ge.com/pm/ext/entity/timeselectionfilter}Tags" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PredixTimeSelectionFilter", propOrder = {
    "startAbsolute",
    "endAbsolute",
    "endRelativeToNow",
    "startRelativeToNow",
    "limit",
    "orderBy",
    "tags"
})
@XmlSeeAlso({
    PredixEventTimeSelectionFilter.class
})
public class PredixTimeSelectionFilter
    extends SelectionFilter
    implements Serializable, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar startAbsolute;
    @XmlElement(required = true)
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar endAbsolute;
    @XmlElement(required = true)
    protected RelativeTime endRelativeToNow;
    @XmlElement(required = true)
    protected RelativeTime startRelativeToNow;
    @XmlElement(required = true)
    protected String limit;
    @XmlElement(required = true)
    protected String orderBy;
    @XmlElement(name = "Tags")
    protected List<Tags> tags;

    /**
     * Gets the value of the startAbsolute property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getStartAbsolute() {
        return startAbsolute;
    }

    /**
     * Sets the value of the startAbsolute property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setStartAbsolute(XMLGregorianCalendar value) {
        this.startAbsolute = value;
    }

    /**
     * Gets the value of the endAbsolute property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getEndAbsolute() {
        return endAbsolute;
    }

    /**
     * Sets the value of the endAbsolute property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setEndAbsolute(XMLGregorianCalendar value) {
        this.endAbsolute = value;
    }

    /**
     * Gets the value of the endRelativeToNow property.
     * 
     * @return
     *     possible object is
     *     {@link RelativeTime }
     *     
     */
    public RelativeTime getEndRelativeToNow() {
        return endRelativeToNow;
    }

    /**
     * Sets the value of the endRelativeToNow property.
     * 
     * @param value
     *     allowed object is
     *     {@link RelativeTime }
     *     
     */
    public void setEndRelativeToNow(RelativeTime value) {
        this.endRelativeToNow = value;
    }

    /**
     * Gets the value of the startRelativeToNow property.
     * 
     * @return
     *     possible object is
     *     {@link RelativeTime }
     *     
     */
    public RelativeTime getStartRelativeToNow() {
        return startRelativeToNow;
    }

    /**
     * Sets the value of the startRelativeToNow property.
     * 
     * @param value
     *     allowed object is
     *     {@link RelativeTime }
     *     
     */
    public void setStartRelativeToNow(RelativeTime value) {
        this.startRelativeToNow = value;
    }

    /**
     * Gets the value of the limit property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLimit() {
        return limit;
    }

    /**
     * Sets the value of the limit property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLimit(String value) {
        this.limit = value;
    }

    /**
     * Gets the value of the orderBy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOrderBy() {
        return orderBy;
    }

    /**
     * Sets the value of the orderBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOrderBy(String value) {
        this.orderBy = value;
    }

    /**
     * Gets the value of the tags property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the tags property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTags().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Tags }
     * 
     * 
     */
    public List<Tags> getTags() {
        if (tags == null) {
            tags = new ArrayList<Tags>();
        }
        return this.tags;
    }

    /**
     * Sets the value of the tags property.
     * 
     * @param tags
     *     allowed object is
     *     {@link Tags }
     *     
     */
    public void setTags(List<Tags> tags) {
        this.tags = tags;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            XMLGregorianCalendar theStartAbsolute;
            theStartAbsolute = this.getStartAbsolute();
            strategy.appendField(locator, this, "startAbsolute", buffer, theStartAbsolute);
        }
        {
            XMLGregorianCalendar theEndAbsolute;
            theEndAbsolute = this.getEndAbsolute();
            strategy.appendField(locator, this, "endAbsolute", buffer, theEndAbsolute);
        }
        {
            RelativeTime theEndRelativeToNow;
            theEndRelativeToNow = this.getEndRelativeToNow();
            strategy.appendField(locator, this, "endRelativeToNow", buffer, theEndRelativeToNow);
        }
        {
            RelativeTime theStartRelativeToNow;
            theStartRelativeToNow = this.getStartRelativeToNow();
            strategy.appendField(locator, this, "startRelativeToNow", buffer, theStartRelativeToNow);
        }
        {
            String theLimit;
            theLimit = this.getLimit();
            strategy.appendField(locator, this, "limit", buffer, theLimit);
        }
        {
            String theOrderBy;
            theOrderBy = this.getOrderBy();
            strategy.appendField(locator, this, "orderBy", buffer, theOrderBy);
        }
        {
            List<Tags> theTags;
            theTags = (((this.tags!= null)&&(!this.tags.isEmpty()))?this.getTags():null);
            strategy.appendField(locator, this, "tags", buffer, theTags);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PredixTimeSelectionFilter)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final PredixTimeSelectionFilter that = ((PredixTimeSelectionFilter) object);
        {
            XMLGregorianCalendar lhsStartAbsolute;
            lhsStartAbsolute = this.getStartAbsolute();
            XMLGregorianCalendar rhsStartAbsolute;
            rhsStartAbsolute = that.getStartAbsolute();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "startAbsolute", lhsStartAbsolute), LocatorUtils.property(thatLocator, "startAbsolute", rhsStartAbsolute), lhsStartAbsolute, rhsStartAbsolute)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsEndAbsolute;
            lhsEndAbsolute = this.getEndAbsolute();
            XMLGregorianCalendar rhsEndAbsolute;
            rhsEndAbsolute = that.getEndAbsolute();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "endAbsolute", lhsEndAbsolute), LocatorUtils.property(thatLocator, "endAbsolute", rhsEndAbsolute), lhsEndAbsolute, rhsEndAbsolute)) {
                return false;
            }
        }
        {
            RelativeTime lhsEndRelativeToNow;
            lhsEndRelativeToNow = this.getEndRelativeToNow();
            RelativeTime rhsEndRelativeToNow;
            rhsEndRelativeToNow = that.getEndRelativeToNow();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "endRelativeToNow", lhsEndRelativeToNow), LocatorUtils.property(thatLocator, "endRelativeToNow", rhsEndRelativeToNow), lhsEndRelativeToNow, rhsEndRelativeToNow)) {
                return false;
            }
        }
        {
            RelativeTime lhsStartRelativeToNow;
            lhsStartRelativeToNow = this.getStartRelativeToNow();
            RelativeTime rhsStartRelativeToNow;
            rhsStartRelativeToNow = that.getStartRelativeToNow();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "startRelativeToNow", lhsStartRelativeToNow), LocatorUtils.property(thatLocator, "startRelativeToNow", rhsStartRelativeToNow), lhsStartRelativeToNow, rhsStartRelativeToNow)) {
                return false;
            }
        }
        {
            String lhsLimit;
            lhsLimit = this.getLimit();
            String rhsLimit;
            rhsLimit = that.getLimit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "limit", lhsLimit), LocatorUtils.property(thatLocator, "limit", rhsLimit), lhsLimit, rhsLimit)) {
                return false;
            }
        }
        {
            String lhsOrderBy;
            lhsOrderBy = this.getOrderBy();
            String rhsOrderBy;
            rhsOrderBy = that.getOrderBy();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "orderBy", lhsOrderBy), LocatorUtils.property(thatLocator, "orderBy", rhsOrderBy), lhsOrderBy, rhsOrderBy)) {
                return false;
            }
        }
        {
            List<Tags> lhsTags;
            lhsTags = (((this.tags!= null)&&(!this.tags.isEmpty()))?this.getTags():null);
            List<Tags> rhsTags;
            rhsTags = (((that.tags!= null)&&(!that.tags.isEmpty()))?that.getTags():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tags", lhsTags), LocatorUtils.property(thatLocator, "tags", rhsTags), lhsTags, rhsTags)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            XMLGregorianCalendar theStartAbsolute;
            theStartAbsolute = this.getStartAbsolute();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "startAbsolute", theStartAbsolute), currentHashCode, theStartAbsolute);
        }
        {
            XMLGregorianCalendar theEndAbsolute;
            theEndAbsolute = this.getEndAbsolute();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "endAbsolute", theEndAbsolute), currentHashCode, theEndAbsolute);
        }
        {
            RelativeTime theEndRelativeToNow;
            theEndRelativeToNow = this.getEndRelativeToNow();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "endRelativeToNow", theEndRelativeToNow), currentHashCode, theEndRelativeToNow);
        }
        {
            RelativeTime theStartRelativeToNow;
            theStartRelativeToNow = this.getStartRelativeToNow();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "startRelativeToNow", theStartRelativeToNow), currentHashCode, theStartRelativeToNow);
        }
        {
            String theLimit;
            theLimit = this.getLimit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "limit", theLimit), currentHashCode, theLimit);
        }
        {
            String theOrderBy;
            theOrderBy = this.getOrderBy();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orderBy", theOrderBy), currentHashCode, theOrderBy);
        }
        {
            List<Tags> theTags;
            theTags = (((this.tags!= null)&&(!this.tags.isEmpty()))?this.getTags():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tags", theTags), currentHashCode, theTags);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
