//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.17 at 02:16:43 AM PST 
//


package com.ge.dsp.pm.ext.entity.moduleconfigroot;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.ge.dsp.pm.ext.entity.context.AnalyticContext;
import com.ge.dsp.pm.ext.entity.context.OrchestrationContext;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import org.mimosa.osacbmv3_3.Configuration;
import org.mimosa.osacbmv3_3.DataEventSet;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="configuration" type="{http://www.mimosa.org/OSACBMV3.3.1}Configuration" minOccurs="0"/>
 *         &lt;element name="dataEventSets" type="{http://www.mimosa.org/OSACBMV3.3.1}DataEventSet" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="orchestrationContext" type="{http://dsp.ge.com/pm/ext/entity/context}OrchestrationContext"/>
 *         &lt;element name="analyticContext" type="{http://dsp.ge.com/pm/ext/entity/context}AnalyticContext" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "configuration",
    "dataEventSets",
    "orchestrationContext",
    "analyticContext"
})
@XmlRootElement(name = "moduleConfigRoot")
public class ModuleConfigRoot
    implements Serializable, Equals, HashCode, ToString
{

    protected Configuration configuration;
    protected List<DataEventSet> dataEventSets;
    @XmlElement(required = true)
    protected OrchestrationContext orchestrationContext;
    protected AnalyticContext analyticContext;

    /**
     * Gets the value of the configuration property.
     * 
     * @return
     *     possible object is
     *     {@link Configuration }
     *     
     */
    public Configuration getConfiguration() {
        return configuration;
    }

    /**
     * Sets the value of the configuration property.
     * 
     * @param value
     *     allowed object is
     *     {@link Configuration }
     *     
     */
    public void setConfiguration(Configuration value) {
        this.configuration = value;
    }

    /**
     * Gets the value of the dataEventSets property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dataEventSets property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDataEventSets().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DataEventSet }
     * 
     * 
     */
    public List<DataEventSet> getDataEventSets() {
        if (dataEventSets == null) {
            dataEventSets = new ArrayList<DataEventSet>();
        }
        return this.dataEventSets;
    }

    /**
     * Gets the value of the orchestrationContext property.
     * 
     * @return
     *     possible object is
     *     {@link OrchestrationContext }
     *     
     */
    public OrchestrationContext getOrchestrationContext() {
        return orchestrationContext;
    }

    /**
     * Sets the value of the orchestrationContext property.
     * 
     * @param value
     *     allowed object is
     *     {@link OrchestrationContext }
     *     
     */
    public void setOrchestrationContext(OrchestrationContext value) {
        this.orchestrationContext = value;
    }

    /**
     * Gets the value of the analyticContext property.
     * 
     * @return
     *     possible object is
     *     {@link AnalyticContext }
     *     
     */
    public AnalyticContext getAnalyticContext() {
        return analyticContext;
    }

    /**
     * Sets the value of the analyticContext property.
     * 
     * @param value
     *     allowed object is
     *     {@link AnalyticContext }
     *     
     */
    public void setAnalyticContext(AnalyticContext value) {
        this.analyticContext = value;
    }

    /**
     * Sets the value of the dataEventSets property.
     * 
     * @param dataEventSets
     *     allowed object is
     *     {@link DataEventSet }
     *     
     */
    public void setDataEventSets(List<DataEventSet> dataEventSets) {
        this.dataEventSets = dataEventSets;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Configuration theConfiguration;
            theConfiguration = this.getConfiguration();
            strategy.appendField(locator, this, "configuration", buffer, theConfiguration);
        }
        {
            List<DataEventSet> theDataEventSets;
            theDataEventSets = (((this.dataEventSets!= null)&&(!this.dataEventSets.isEmpty()))?this.getDataEventSets():null);
            strategy.appendField(locator, this, "dataEventSets", buffer, theDataEventSets);
        }
        {
            OrchestrationContext theOrchestrationContext;
            theOrchestrationContext = this.getOrchestrationContext();
            strategy.appendField(locator, this, "orchestrationContext", buffer, theOrchestrationContext);
        }
        {
            AnalyticContext theAnalyticContext;
            theAnalyticContext = this.getAnalyticContext();
            strategy.appendField(locator, this, "analyticContext", buffer, theAnalyticContext);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ModuleConfigRoot)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ModuleConfigRoot that = ((ModuleConfigRoot) object);
        {
            Configuration lhsConfiguration;
            lhsConfiguration = this.getConfiguration();
            Configuration rhsConfiguration;
            rhsConfiguration = that.getConfiguration();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "configuration", lhsConfiguration), LocatorUtils.property(thatLocator, "configuration", rhsConfiguration), lhsConfiguration, rhsConfiguration)) {
                return false;
            }
        }
        {
            List<DataEventSet> lhsDataEventSets;
            lhsDataEventSets = (((this.dataEventSets!= null)&&(!this.dataEventSets.isEmpty()))?this.getDataEventSets():null);
            List<DataEventSet> rhsDataEventSets;
            rhsDataEventSets = (((that.dataEventSets!= null)&&(!that.dataEventSets.isEmpty()))?that.getDataEventSets():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataEventSets", lhsDataEventSets), LocatorUtils.property(thatLocator, "dataEventSets", rhsDataEventSets), lhsDataEventSets, rhsDataEventSets)) {
                return false;
            }
        }
        {
            OrchestrationContext lhsOrchestrationContext;
            lhsOrchestrationContext = this.getOrchestrationContext();
            OrchestrationContext rhsOrchestrationContext;
            rhsOrchestrationContext = that.getOrchestrationContext();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "orchestrationContext", lhsOrchestrationContext), LocatorUtils.property(thatLocator, "orchestrationContext", rhsOrchestrationContext), lhsOrchestrationContext, rhsOrchestrationContext)) {
                return false;
            }
        }
        {
            AnalyticContext lhsAnalyticContext;
            lhsAnalyticContext = this.getAnalyticContext();
            AnalyticContext rhsAnalyticContext;
            rhsAnalyticContext = that.getAnalyticContext();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "analyticContext", lhsAnalyticContext), LocatorUtils.property(thatLocator, "analyticContext", rhsAnalyticContext), lhsAnalyticContext, rhsAnalyticContext)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Configuration theConfiguration;
            theConfiguration = this.getConfiguration();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "configuration", theConfiguration), currentHashCode, theConfiguration);
        }
        {
            List<DataEventSet> theDataEventSets;
            theDataEventSets = (((this.dataEventSets!= null)&&(!this.dataEventSets.isEmpty()))?this.getDataEventSets():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataEventSets", theDataEventSets), currentHashCode, theDataEventSets);
        }
        {
            OrchestrationContext theOrchestrationContext;
            theOrchestrationContext = this.getOrchestrationContext();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orchestrationContext", theOrchestrationContext), currentHashCode, theOrchestrationContext);
        }
        {
            AnalyticContext theAnalyticContext;
            theAnalyticContext = this.getAnalyticContext();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "analyticContext", theAnalyticContext), currentHashCode, theAnalyticContext);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
